// license:BSD-3-Clause
// copyright-holders:Ryan Holtz
//
// Netlist for Fire One
//
// Derived from the schematics in the manual.
//
// Known problems/issues:
//
//    * None.
//

#include "netlist/devices/net_lib.h"
#include "nl_fireone.h"

//
// 556 is just two 555s in one package
//

#define NE556_DIP(name) SUBMODEL(_NE556_DIP, name)
#define LM556_DIP NE556_DIP

static NETLIST_START(_NE556_DIP)
	NE555(A)
	NE555(B)

	NET_C(A.GND, B.GND)
	NET_C(A.VCC, B.VCC)

	DIPPINS(      /*        +--------------+        */
		 A.DISCH, /* 1DISCH |1     ++    14| VCC    */ A.VCC,
		A.THRESH, /* 1THRES |2           13| 2DISCH */ B.DISCH,
		  A.CONT, /*  1CONT |3           12| 2THRES */ B.THRESH,
		 A.RESET, /* 1RESET |4   NE556   11| 2CONT  */ B.CONT,
		   A.OUT, /*   1OUT |5           10| 2RESET */ B.RESET,
		  A.TRIG, /*  1TRIG |6            9| 2OUT   */ B.OUT,
		   A.GND, /*    GND |7            8| 2TRIG  */ B.TRIG
				  /*        +--------------+        */
	)
NETLIST_END()

//
// Main netlist
//

NETLIST_START(fireone)
	NET_MODEL("2N3704 NPN(IS=26.03f VAF=90.7 Bf=736.1K IKF=.1983 XTB=1.5 BR=1.024 CJC=11.01p CJE=24.07p RB=10 RC=.5 RE=.5 TR=233.8n TF=1.03n ITF=0 VTF=0 XTF=0 mfg=Motorola)")

	SOLVER(Solver, 48000)
	ANALOG_INPUT(V12, 12)
	ANALOG_INPUT(VM12, -12)
	ANALOG_INPUT(V5, 5)
	ALIAS(VCC, V5)

	TTL_INPUT(LTORP, 0)			// active high
	TTL_INPUT(LSHPHT, 0)		// active high
	TTL_INPUT(LBOOM, 0)			// active high
	TTL_INPUT(SOUND_OFF, 0)		// active high
	TTL_INPUT(RTORP, 0)			// active high
	TTL_INPUT(RSHPHT, 0)		// active high
	TTL_INPUT(RBOOM, 0)			// active high
	TTL_INPUT(SUBENG, 0)		// active high
	TTL_INPUT(ALERT, 0)			// active high
	//TTL_INPUT(SONAR_ENABLE, 0)	// active high
	TTL_INPUT(SONAR_SYNC, 0)	// active low

	NET_C(VCC, LTORP.VCC, LSHPHT.VCC, LBOOM.VCC, SOUND_OFF.VCC, RTORP.VCC, RSHPHT.VCC, RBOOM.VCC, SUBENG.VCC, ALERT.VCC, SONAR_SYNC.VCC)
	NET_C(GND, LTORP.GND, LSHPHT.GND, LBOOM.GND, SOUND_OFF.GND, RTORP.GND, RSHPHT.GND, RBOOM.GND, SUBENG.GND, ALERT.GND, SONAR_SYNC.GND)

	LOCAL_SOURCE(_NE556_DIP)

	TTL_7404_GATE(IC27_A)
	TTL_7404_GATE(IC27_C)
	TTL_7404_GATE(IC27_D)
	NET_C(VCC, IC27_A.VCC, IC27_C.VCC, IC27_D.VCC)
	NET_C(GND, IC27_A.GND, IC27_C.GND, IC27_D.GND)
	//TTL_7406_GATE(IC27_E)

	//CD4070_GATE(IC41_A)
	//CD4070_GATE(IC41_B)
	CD4070_GATE(IC41_C)
	CD4070_GATE(IC41_D)
	NET_C(V12, /*IC41_A.VDD, IC41_B.VDD,*/ IC41_C.VDD, IC41_D.VDD)
	NET_C(GND, /*IC41_A.VSS, IC41_B.VSS,*/ IC41_C.VSS, IC41_D.VSS)

	CD4006_DIP(IC40)
	NET_C(V12, IC40.14)
	NET_C(GND, IC40.7)

	CD4017_DIP(IC25)
	NET_C(V12, IC25.16)
	NET_C(GND, IC25.8)

	CD4013(IC3)
	NET_C(V12, IC3.VDD)
	NET_C(GND, IC3.VSS)

	MC1558_DIP(IC6)
	NET_C(IC6.8, V12)
	NET_C(IC6.4, VM12)

	MC1558_DIP(IC16)
	NET_C(IC16.8, V12)
	NET_C(IC16.4, VM12)

	MC1558_DIP(IC17)
	NET_C(IC17.8, V12)
	NET_C(IC17.4, VM12)

	NE555(IC29)

	NE556_DIP(IC31)
	NET_C(IC31.14, V5)
	NET_C(IC31.7, GND)

	MC3340_DIP(IC28)
	NET_C(IC28.8, V12)
	NET_C(IC28.3, GND)

	MC3340_DIP(IC30)
	NET_C(IC30.8, V12)
	NET_C(IC30.3, GND)

	LM3900(IC4_A)
	LM3900(IC4_B)
	NET_C(V12, IC4_A.VCC, IC4_B.VCC)
	NET_C(GND, IC4_A.GND, IC4_B.GND)

	RES(R19, RES_K(150))
	RES(R20, RES_K(2))
	RES(R21, RES_K(180))
	RES(R22, RES_K(180))
	RES(R23, RES_K(130))
	RES(R24, RES_K(10))
	RES(R25, RES_K(2))
	RES(R26, RES_K(68))
	RES(R27, RES_K(270))
	RES(R28, RES_K(10))
	RES(R29, RES_K(130))
	RES(R35, RES_K(1))
	RES(R36, RES_K(15))
	RES(R37, RES_K(15))
	RES(R38, RES_K(820))
	RES(R39, RES_M(1))
	RES(R56, RES_K(10))
	RES(R62, RES_M(1))
	POT(R64, RES_K(10))
	POT(R65, RES_K(10))
	RES(R66, RES_K(27))
	RES(R67, RES_K(68))
	RES(R68, RES_K(100))
	RES(R69, RES_M(1))
	RES(R70, RES_K(10))
	RES(R71, RES_K(16))
	RES(R72, RES_K(68))
	RES(R73, RES_K(47))
	RES(R75, RES_K(120))
	RES(R79, RES_K(130))
	RES(R80, RES_K(130))
	RES(R82, RES_K(160))
	RES(R83, RES_M(1))
	RES(R84, RES_K(100))
	RES(R85, RES_K(270))
	RES(R86, RES_K(16))
	RES(R87, RES_K(100))
	//RES(R101, RES_K(10))
	RES(R102, RES_K(3))
	RES(R103, RES_K(3))
	RES(R104, RES_M(1))
	RES(R105, RES_K(100))
	RES(R106, RES_K(100))
	RES(R107, RES_K(47))
	RES(R108, RES_K(20))
	RES(R110, RES_K(1))
	RES(R117, RES_K(20))
	RES(R120, RES_K(5.6))
	RES(R122, RES_K(2.7))
	RES(R123, RES_K(100))
	RES(R124, RES_K(3))
	RES(R125, RES_K(3))
	RES(R126, RES_K(6.8))
	RES(R127, RES_K(8.2))
	RES(R137, RES_K(5.6))
	RES(R138, RES_K(47))
	RES(R139, 100)
	RES(R141, RES_K(3))
	//RES(R142, RES_K(56))
	//RES(R143, RES_K(56))
	RES(R140, RES_K(10))
	RES(R144, RES_K(100))
	RES(R150, RES_K(100))
	//RES(R, RES_K())

	CAP(C15, CAP_U(1.0))
	CAP(C16, CAP_U(10))
	CAP(C17, CAP_U(0.1))
	CAP(C18, CAP_U(0.1))
	CAP(C20, CAP_U(10))
	CAP(C23, CAP_U(0.33))
	CAP(C26, CAP_U(0.022))
	CAP(C27, CAP_U(0.022))
	CAP(C45, CAP_U(0.1))
	CAP(C48, CAP_U(0.1))
	CAP(C50, CAP_U(1.0))
	CAP(C51, CAP_U(0.1))
	CAP(C52, CAP_U(0.1))
	CAP(C55, CAP_U(0.1))
	CAP(C70, CAP_U(1.0))
	CAP(C72, CAP_U(2.2))
	CAP(C73, CAP_U(1.0))
	CAP(C74, CAP_U(1.0))
	CAP(C75, CAP_U(0.1))
	CAP(C80, CAP_U(1.0))
	CAP(C81, CAP_U(0.1))
	CAP(C82, CAP_U(0.1))
	CAP(C84, CAP_U(0.1))
	CAP(C85, CAP_U(2.2))
	CAP(C100, CAP_U(0.22))
	//CAP(C102, CAP_U(0.001))
	CAP(C106, CAP_U(0.1))
	CAP(C109, CAP_U(0.1))
	CAP(C114, CAP_U(0.1))
	CAP(C121, CAP_U(0.001))
	CAP(C122, CAP_U(0.001))
	//CAP(C, CAP_U())

	DIODE(D2, "1N914")
	DIODE(D3, "1N914")
	DIODE(D4, "1N914")
	DIODE(D5, "1N914")
	DIODE(D7, "1N914")
	DIODE(D8, "1N914")
	DIODE(D14, "1N914")

	QBJT_EB(Q2, "2N3704")

	// Noise Generator
	CLOCK(HLE_SONAR_CLOCK, 998)
	NET_C(HLE_SONAR_CLOCK.GND, GND)
	NET_C(HLE_SONAR_CLOCK.VCC, V12)

	SWITCH2(SONAR_ENABLE)
	NET_C(SONAR_ENABLE.1, HLE_SONAR_CLOCK.Q)
	NET_C(SONAR_ENABLE.2, GND)
	NET_C(SONAR_ENABLE.Q, IC40.3)

	NET_C(IC40.1, IC40.12, IC41_C.A)
	NET_C(IC40.4, IC41_C.Q)
	NET_C(IC40.5, IC41_D.Q)
	NET_C(R141.1, IC40.6, IC40.10, C45.1)
	ALIAS(NOISE_A, R141.1)
	NET_C(R141.2, R140.1)
	NET_C(R140.2, V12)
	ALIAS(NOISE, R140.1)
	NET_C(IC40.8, IC41_C.B)
	NET_C(IC40.13, IC41_D.A)

	// Sonar
	NET_C(IC27_A.A, SONAR_SYNC.Q)
	NET_C(IC27_A.Q, R70.1, IC25.15, IC41_D.B)
	NET_C(R70.2, V12, IC29.RESET)
	NET_C(IC29.GND, GND)
	NET_C(IC29.VCC, V12)
	NET_C(IC29.DISCH, R110.1, R107.1)
	NET_C(R110.2, V12)
	NET_C(IC29.THRESH, IC29.TRIG, R107.2, C72.1)
	NET_C(C72.2, GND)
	NET_C(IC29.OUT, D3.K, IC3.CLOCK)
	NET_C(IC3.QQ, IC3.DATA)
	NET_C(IC3.SET, IC3.RESET, GND)
	NET_C(IC3.Q, D2.K, IC25.14)
	NET_C(IC25.13, GND)
	NET_C(IC25.2, R36.1)
	NET_C(IC25.4, R72.1)
	NET_C(IC25.10, R73.1)
	NET_C(IC25.11, R75.1)
	NET_C(R36.2, R72.2, R73.2, R75.2, D3.A, D2.A, R19.2, Q2.C)
	NET_C(NOISE_A, R138.1)
	NET_C(R138.2, C100.1, R137.1)
	NET_C(C100.2, GND)
	NET_C(R137.2, R139.1, C27.1, C26.1, R19.1)
	NET_C(R139.2, GND)
	NET_C(IC6.3, GND)
	NET_C(IC6.2, R38.1, C27.2)
	NET_C(IC6.1, R37.1, R38.2, R85.1, R27.1, C26.2)
	NET_C(R37.2, D7.A, D8.K, IC6.5)
	NET_C(D7.K, GND)
	NET_C(D8.A, GND)
	NET_C(IC6.6, R35.1, R39.1)
	NET_C(R35.2, C23.1)
	NET_C(C23.2, GND)
	NET_C(IC6.7, R56.1, R39.2)
	NET_C(R56.2, D14.K, Q2.B)
	NET_C(D14.A, GND)
	NET_C(Q2.E, GND)

	ALIAS(MIX_L, R27.2)
	ALIAS(MIX_R, R85.2)

	// Low Filter
	NET_C(C45.2, R68.1)
	NET_C(R68.2, IC16.6, R66.1)
	NET_C(IC16.5, GND)
	NET_C(R66.2, IC16.7, R71.1)
	NET_C(R71.2, R86.1, C51.1)
	NET_C(R86.2, C55.1, IC17.5)
	NET_C(C55.2, GND)
	NET_C(C51.2, IC17.7, R82.1)
	NET_C(R82.2, IC17.6, R123.1)
	NET_C(R123.2, GND)
	ALIAS(RUMBLE, IC17.7)

	// Submarine Engine
	NET_C(IC31.4, V5)
	NET_C(IC31.1, R120.1, R122.1)
	NET_C(R120.2, V5)
	NET_C(IC31.2, IC31.6, IC31.11, R122.2, C85.1)
	NET_C(C85.2, GND)
	NET_C(IC31.5, GND)
	NET_C(IC31.13, R126.1, R127.1)
	NET_C(R126.2, V5)
	NET_C(IC31.8, IC31.12, R127.2, C84.1)
	NET_C(C84.2, GND)
	NET_C(IC31.10, SUBENG.Q)
	NET_C(IC31.9, R124.1)
	NET_C(R124.2, R125.1, C114.1)
	NET_C(C114.2, GND)
	NET_C(R125.2, R79.1, R80.1, C52.1)
	NET_C(C52.2, GND)
	NET_C(R79.2, MIX_L)
	NET_C(R80.2, MIX_R)

	// Ship Explosion (L)
	NET_C(RUMBLE, R87.1)
	NET_C(R87.2, R84.1, C80.1)
	NET_C(R84.2, GND)
	NET_C(IC30.1, C80.2)
	NET_C(IC30.7, R117.1)
	NET_C(IC30.6, C81.1)
	NET_C(C81.2, GND)
	NET_C(LBOOM.Q, IC27_C.A)
	NET_C(IC27_C.Q, R103.1)
	NET_C(R103.2, R104.1, C70.1)
	NET_C(C70.2, GND)
	NET_C(R104.2, IC17.3, R83.1)
	NET_C(R83.2, V5)
	NET_C(IC17.1, IC17.2, IC30.2)
	NET_C(R117.2, MIX_L)

	// Ship Explosion (R)
	NET_C(RUMBLE, R105.1)
	NET_C(R105.2, R106.1, C74.1)
	NET_C(R106.2, GND)
	NET_C(IC28.1, C74.2)
	NET_C(IC28.7, R108.1)
	NET_C(IC28.6, C75.1)
	NET_C(C75.2, GND)
	NET_C(RBOOM.Q, IC27_D.A)
	NET_C(IC27_D.Q, R102.1)
	NET_C(R102.2, R69.1, C73.1)
	NET_C(C73.2, GND)
	NET_C(R69.2, IC16.3, R62.1)
	NET_C(R62.2, V5)
	NET_C(IC16.1, IC16.2, IC28.2)
	NET_C(R108.2, MIX_R)

	// Mixers (shared)
	NET_C(SOUND_OFF.Q, D4.A, D5.A)

	// Mixer (L)
	NET_C(MIX_L, C15.1)
	NET_C(R25.1, V12)
	NET_C(R25.2, C16.1, C48.1, R23.1)
	NET_C(C16.2, C48.2, C82.2, R64.1, R144.2, GND)
	NET_C(R23.2, IC4_A.PLUS)
	NET_C(D4.K, C82.1, R24.1)
	NET_C(R24.2, C15.2, IC4_A.MINUS, R26.1, C121.1)
	NET_C(C121.2, R26.2, IC4_A.OUT, R21.1)
	NET_C(R21.2, R64.3)
	NET_C(R64.2, C106.1)
	NET_C(C106.2, R144.1)
	ALIAS(OUT_L, C106.2)

	// Mixer (R)
	NET_C(MIX_R, C50.1)
	NET_C(R20.1, V12)
	NET_C(R20.2, C20.1, C18.1, R29.1)
	NET_C(C20.2, C18.2, C17.2, R65.1, R150.2, GND)
	NET_C(R29.2, IC4_B.PLUS)
	NET_C(D5.K, C17.1, R28.1)
	NET_C(R28.2, C50.2, IC4_B.MINUS, R67.1, C122.1)
	NET_C(C122.2, R67.2, IC4_B.OUT, R22.1)
	NET_C(R22.2, R65.3)
	NET_C(R65.2, C109.1)
	NET_C(C109.2, R150.1)
	ALIAS(OUT_R, C109.2)
NETLIST_END()
